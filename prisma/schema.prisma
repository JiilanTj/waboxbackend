// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  email     String   @unique
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum SessionStatus {
  PENDING
  CONNECTED
  DISCONNECTED
  PAIRING
  ERROR
}

model WhatsAppNumber {
  id          Int      @id @default(autoincrement())
  name        String
  phoneNumber String   @unique
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relation to sessions
  sessions    WhatsAppSession[]

  @@map("whatsapp_numbers")
}

model WhatsAppSession {
  id                String        @id @default(uuid())
  whatsappNumberId  Int
  sessionData       Json?         // Baileys session data (encrypted)
  qrCode            String?       @db.Text // QR Code base64 string
  status            SessionStatus @default(PENDING)
  lastConnected     DateTime?
  isActive          Boolean       @default(false)
  connectionInfo    Json?         // Additional connection metadata
  errorMessage      String?       @db.Text
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  whatsappNumber    WhatsAppNumber @relation(fields: [whatsappNumberId], references: [id], onDelete: Cascade)

  @@map("whatsapp_sessions")
  @@index([whatsappNumberId])
  @@index([status])
}
