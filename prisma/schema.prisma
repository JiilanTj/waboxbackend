// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  email     String   @unique
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  whatsappPermissions WaNumberPermission[]

  @@map("users")
}

enum SessionStatus {
  PENDING
  CONNECTED
  DISCONNECTED
  PAIRING
  ERROR
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  LOCATION
  CONTACT
  STICKER
  SYSTEM
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

model WhatsAppNumber {
  id          Int      @id @default(autoincrement())
  name        String
  phoneNumber String   @unique
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  sessions    WhatsAppSession[]
  // Relation to chats where this number is the owner
  chats       Chat[]
  // Relation to user permissions
  permissions WaNumberPermission[]

  @@map("whatsapp_numbers")
}

model WhatsAppSession {
  id                String        @id @default(uuid())
  whatsappNumberId  Int
  sessionData       Json?         // Baileys session data (encrypted)
  qrCode            String?       @db.Text // QR Code base64 string
  status            SessionStatus @default(PENDING)
  lastConnected     DateTime?
  isActive          Boolean       @default(false)
  connectionInfo    Json?         // Additional connection metadata
  errorMessage      String?       @db.Text
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  whatsappNumber    WhatsAppNumber @relation(fields: [whatsappNumberId], references: [id], onDelete: Cascade)

  @@map("whatsapp_sessions")
  @@index([whatsappNumberId])
  @@index([status])
}

model Chat {
  id               String   @id @default(uuid())
  whatsappNumberId Int      // Which WhatsApp number owns this chat
  contactJid       String   // Contact's JID (e.g., 628123456789@s.whatsapp.net)
  contactName      String?  // Contact's display name
  contactNumber    String   // Contact's phone number (normalized)
  isGroup          Boolean  @default(false)
  groupName        String?  // Group name if it's a group chat
  lastMessageId    String?  // ID of the last message
  lastMessageText  String?  // Preview of last message
  lastMessageTime  DateTime? // Time of last message
  unreadCount      Int      @default(0)
  isPinned         Boolean  @default(false)
  isArchived       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  whatsappNumber   WhatsAppNumber @relation(fields: [whatsappNumberId], references: [id], onDelete: Cascade)
  messages         Message[]

  @@map("chats")
  @@unique([whatsappNumberId, contactJid])
  @@index([whatsappNumberId])
  @@index([lastMessageTime])
}

model Message {
  id                String        @id @default(uuid())
  chatId            String
  messageId         String        // WhatsApp message ID
  fromJid           String        // Sender's JID
  fromNumber        String        // Sender's phone number
  fromName          String?       // Sender's display name
  toJid             String        // Recipient's JID
  toNumber          String        // Recipient's phone number
  type              MessageType   @default(TEXT)
  content           String?       @db.Text // Message text content
  mediaUrl          String?       // URL for media files
  mediaType         String?       // MIME type for media
  mediaSize         Int?          // File size for media
  mediaCaption      String?       // Caption for media
  quotedMessageId   String?       // ID of quoted message
  quotedContent     String?       // Content of quoted message
  status            MessageStatus @default(PENDING)
  isFromMe          Boolean       // Whether message was sent by us
  timestamp         DateTime      // Message timestamp
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  chat              Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@unique([messageId, chatId])
  @@index([chatId])
  @@index([timestamp])
  @@index([fromJid])
}

model WaNumberPermission {
  id               Int      @id @default(autoincrement())
  userId           Int
  whatsappNumberId Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  whatsappNumber   WhatsAppNumber @relation(fields: [whatsappNumberId], references: [id], onDelete: Cascade)

  @@map("wa_number_permissions")
  @@unique([userId, whatsappNumberId]) // Prevent duplicate permissions
  @@index([userId])
  @@index([whatsappNumberId])
}
